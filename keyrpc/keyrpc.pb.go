// Code generated by protoc-gen-go. DO NOT EDIT.
// source: keyrpc.proto

package keyrpc

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Key struct {
	KeyName              string   `protobuf:"bytes,1,opt,name=key_name,json=keyName,proto3" json:"key_name,omitempty"`
	Virtual              uint32   `protobuf:"varint,2,opt,name=virtual,proto3" json:"virtual,omitempty"`
	Scan                 uint32   `protobuf:"varint,3,opt,name=scan,proto3" json:"scan,omitempty"`
	Sleep                int32    `protobuf:"varint,4,opt,name=sleep,proto3" json:"sleep,omitempty"`
	Mock                 bool     `protobuf:"varint,5,opt,name=mock,proto3" json:"mock,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Key) Reset()         { *m = Key{} }
func (m *Key) String() string { return proto.CompactTextString(m) }
func (*Key) ProtoMessage()    {}
func (*Key) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b261c32c410cd6, []int{0}
}

func (m *Key) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Key.Unmarshal(m, b)
}
func (m *Key) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Key.Marshal(b, m, deterministic)
}
func (m *Key) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Key.Merge(m, src)
}
func (m *Key) XXX_Size() int {
	return xxx_messageInfo_Key.Size(m)
}
func (m *Key) XXX_DiscardUnknown() {
	xxx_messageInfo_Key.DiscardUnknown(m)
}

var xxx_messageInfo_Key proto.InternalMessageInfo

func (m *Key) GetKeyName() string {
	if m != nil {
		return m.KeyName
	}
	return ""
}

func (m *Key) GetVirtual() uint32 {
	if m != nil {
		return m.Virtual
	}
	return 0
}

func (m *Key) GetScan() uint32 {
	if m != nil {
		return m.Scan
	}
	return 0
}

func (m *Key) GetSleep() int32 {
	if m != nil {
		return m.Sleep
	}
	return 0
}

func (m *Key) GetMock() bool {
	if m != nil {
		return m.Mock
	}
	return false
}

type KeyPress struct {
	Key                  uint32   `protobuf:"varint,1,opt,name=Key,proto3" json:"Key,omitempty"`
	Modifier             uint32   `protobuf:"varint,2,opt,name=Modifier,proto3" json:"Modifier,omitempty"`
	Upper                bool     `protobuf:"varint,3,opt,name=Upper,proto3" json:"Upper,omitempty"`
	Sleep                uint32   `protobuf:"varint,4,opt,name=Sleep,proto3" json:"Sleep,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyPress) Reset()         { *m = KeyPress{} }
func (m *KeyPress) String() string { return proto.CompactTextString(m) }
func (*KeyPress) ProtoMessage()    {}
func (*KeyPress) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b261c32c410cd6, []int{1}
}

func (m *KeyPress) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyPress.Unmarshal(m, b)
}
func (m *KeyPress) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyPress.Marshal(b, m, deterministic)
}
func (m *KeyPress) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyPress.Merge(m, src)
}
func (m *KeyPress) XXX_Size() int {
	return xxx_messageInfo_KeyPress.Size(m)
}
func (m *KeyPress) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyPress.DiscardUnknown(m)
}

var xxx_messageInfo_KeyPress proto.InternalMessageInfo

func (m *KeyPress) GetKey() uint32 {
	if m != nil {
		return m.Key
	}
	return 0
}

func (m *KeyPress) GetModifier() uint32 {
	if m != nil {
		return m.Modifier
	}
	return 0
}

func (m *KeyPress) GetUpper() bool {
	if m != nil {
		return m.Upper
	}
	return false
}

func (m *KeyPress) GetSleep() uint32 {
	if m != nil {
		return m.Sleep
	}
	return 0
}

type EntrySummary struct {
	Complete             bool     `protobuf:"varint,1,opt,name=complete,proto3" json:"complete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EntrySummary) Reset()         { *m = EntrySummary{} }
func (m *EntrySummary) String() string { return proto.CompactTextString(m) }
func (*EntrySummary) ProtoMessage()    {}
func (*EntrySummary) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b261c32c410cd6, []int{2}
}

func (m *EntrySummary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EntrySummary.Unmarshal(m, b)
}
func (m *EntrySummary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EntrySummary.Marshal(b, m, deterministic)
}
func (m *EntrySummary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EntrySummary.Merge(m, src)
}
func (m *EntrySummary) XXX_Size() int {
	return xxx_messageInfo_EntrySummary.Size(m)
}
func (m *EntrySummary) XXX_DiscardUnknown() {
	xxx_messageInfo_EntrySummary.DiscardUnknown(m)
}

var xxx_messageInfo_EntrySummary proto.InternalMessageInfo

func (m *EntrySummary) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

type Summary struct {
	Complete             bool     `protobuf:"varint,1,opt,name=complete,proto3" json:"complete,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Summary) Reset()         { *m = Summary{} }
func (m *Summary) String() string { return proto.CompactTextString(m) }
func (*Summary) ProtoMessage()    {}
func (*Summary) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0b261c32c410cd6, []int{3}
}

func (m *Summary) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Summary.Unmarshal(m, b)
}
func (m *Summary) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Summary.Marshal(b, m, deterministic)
}
func (m *Summary) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Summary.Merge(m, src)
}
func (m *Summary) XXX_Size() int {
	return xxx_messageInfo_Summary.Size(m)
}
func (m *Summary) XXX_DiscardUnknown() {
	xxx_messageInfo_Summary.DiscardUnknown(m)
}

var xxx_messageInfo_Summary proto.InternalMessageInfo

func (m *Summary) GetComplete() bool {
	if m != nil {
		return m.Complete
	}
	return false
}

func init() {
	proto.RegisterType((*Key)(nil), "keyrpc.Key")
	proto.RegisterType((*KeyPress)(nil), "keyrpc.KeyPress")
	proto.RegisterType((*EntrySummary)(nil), "keyrpc.EntrySummary")
	proto.RegisterType((*Summary)(nil), "keyrpc.Summary")
}

func init() { proto.RegisterFile("keyrpc.proto", fileDescriptor_f0b261c32c410cd6) }

var fileDescriptor_f0b261c32c410cd6 = []byte{
	// 280 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x91, 0xcd, 0x4a, 0xc4, 0x30,
	0x10, 0x80, 0x8d, 0xfb, 0x17, 0xe3, 0x16, 0x97, 0xb0, 0x87, 0xd8, 0x53, 0x29, 0x08, 0xc5, 0xc3,
	0x82, 0xfa, 0x06, 0x8a, 0xa7, 0xa2, 0x2c, 0x59, 0x3c, 0x4b, 0xed, 0x8e, 0x50, 0xda, 0x34, 0x21,
	0x4d, 0xc5, 0xbc, 0xbd, 0x74, 0xfa, 0x43, 0x8f, 0xde, 0xe6, 0x1b, 0x66, 0xf2, 0xcd, 0x4c, 0xd8,
	0xb6, 0x04, 0x6f, 0x4d, 0x7e, 0x30, 0x56, 0x3b, 0xcd, 0xd7, 0x3d, 0xc5, 0xbf, 0x6c, 0x91, 0x82,
	0xe7, 0xb7, 0x8c, 0x96, 0xe0, 0x3f, 0xeb, 0x4c, 0x81, 0x20, 0x11, 0x49, 0xae, 0xe4, 0xa6, 0x04,
	0xff, 0x9e, 0x29, 0xe0, 0x82, 0x6d, 0x7e, 0x0a, 0xeb, 0xda, 0xac, 0x12, 0x97, 0x11, 0x49, 0x02,
	0x39, 0x22, 0xe7, 0x6c, 0xd9, 0xe4, 0x59, 0x2d, 0x16, 0x98, 0xc6, 0x98, 0xef, 0xd9, 0xaa, 0xa9,
	0x00, 0x8c, 0x58, 0x46, 0x24, 0x59, 0xc9, 0x1e, 0xba, 0x4a, 0xa5, 0xf3, 0x52, 0xac, 0x22, 0x92,
	0x50, 0x89, 0x71, 0x7c, 0x66, 0x34, 0x05, 0x7f, 0xb4, 0xd0, 0x34, 0x7c, 0x87, 0x53, 0xa0, 0x39,
	0x90, 0x38, 0x50, 0xc8, 0xe8, 0x9b, 0x3e, 0x17, 0xdf, 0x05, 0xd8, 0x41, 0x3b, 0x71, 0xe7, 0xf8,
	0x30, 0x06, 0x2c, 0x8a, 0xa9, 0xec, 0xa1, 0xcb, 0x9e, 0x26, 0x73, 0x20, 0x7b, 0x88, 0xef, 0xd9,
	0xf6, 0xb5, 0x76, 0xd6, 0x9f, 0x5a, 0xa5, 0x32, 0x8b, 0xef, 0xe6, 0x5a, 0x99, 0x0a, 0x5c, 0xbf,
	0x28, 0x95, 0x13, 0xc7, 0x77, 0x6c, 0xf3, 0x8f, 0xb2, 0xc7, 0x9a, 0xad, 0x53, 0xf0, 0xf2, 0xf8,
	0xc2, 0x1f, 0x70, 0x05, 0xa9, 0x5b, 0x07, 0xfc, 0xfa, 0x30, 0xdc, 0x37, 0x05, 0x1f, 0xee, 0x47,
	0x98, 0xbb, 0xe3, 0x8b, 0x84, 0x0c, 0x2d, 0xcf, 0xad, 0x6d, 0x1c, 0xdf, 0xcd, 0x5a, 0xf0, 0x0e,
	0xe1, 0xcd, 0x98, 0x99, 0xb5, 0x7c, 0xad, 0xf1, 0xc7, 0x9e, 0xfe, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x2e, 0x22, 0xcb, 0x25, 0xc1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// KeyRPCClient is the client API for KeyRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type KeyRPCClient interface {
	KeyRoute(ctx context.Context, opts ...grpc.CallOption) (KeyRPC_KeyRouteClient, error)
	KeyBurst(ctx context.Context, opts ...grpc.CallOption) (KeyRPC_KeyBurstClient, error)
}

type keyRPCClient struct {
	cc *grpc.ClientConn
}

func NewKeyRPCClient(cc *grpc.ClientConn) KeyRPCClient {
	return &keyRPCClient{cc}
}

func (c *keyRPCClient) KeyRoute(ctx context.Context, opts ...grpc.CallOption) (KeyRPC_KeyRouteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KeyRPC_serviceDesc.Streams[0], "/keyrpc.KeyRPC/KeyRoute", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyRPCKeyRouteClient{stream}
	return x, nil
}

type KeyRPC_KeyRouteClient interface {
	Send(*Key) error
	CloseAndRecv() (*EntrySummary, error)
	grpc.ClientStream
}

type keyRPCKeyRouteClient struct {
	grpc.ClientStream
}

func (x *keyRPCKeyRouteClient) Send(m *Key) error {
	return x.ClientStream.SendMsg(m)
}

func (x *keyRPCKeyRouteClient) CloseAndRecv() (*EntrySummary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EntrySummary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *keyRPCClient) KeyBurst(ctx context.Context, opts ...grpc.CallOption) (KeyRPC_KeyBurstClient, error) {
	stream, err := c.cc.NewStream(ctx, &_KeyRPC_serviceDesc.Streams[1], "/keyrpc.KeyRPC/KeyBurst", opts...)
	if err != nil {
		return nil, err
	}
	x := &keyRPCKeyBurstClient{stream}
	return x, nil
}

type KeyRPC_KeyBurstClient interface {
	Send(*KeyPress) error
	CloseAndRecv() (*Summary, error)
	grpc.ClientStream
}

type keyRPCKeyBurstClient struct {
	grpc.ClientStream
}

func (x *keyRPCKeyBurstClient) Send(m *KeyPress) error {
	return x.ClientStream.SendMsg(m)
}

func (x *keyRPCKeyBurstClient) CloseAndRecv() (*Summary, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Summary)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// KeyRPCServer is the server API for KeyRPC service.
type KeyRPCServer interface {
	KeyRoute(KeyRPC_KeyRouteServer) error
	KeyBurst(KeyRPC_KeyBurstServer) error
}

func RegisterKeyRPCServer(s *grpc.Server, srv KeyRPCServer) {
	s.RegisterService(&_KeyRPC_serviceDesc, srv)
}

func _KeyRPC_KeyRoute_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KeyRPCServer).KeyRoute(&keyRPCKeyRouteServer{stream})
}

type KeyRPC_KeyRouteServer interface {
	SendAndClose(*EntrySummary) error
	Recv() (*Key, error)
	grpc.ServerStream
}

type keyRPCKeyRouteServer struct {
	grpc.ServerStream
}

func (x *keyRPCKeyRouteServer) SendAndClose(m *EntrySummary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *keyRPCKeyRouteServer) Recv() (*Key, error) {
	m := new(Key)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _KeyRPC_KeyBurst_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(KeyRPCServer).KeyBurst(&keyRPCKeyBurstServer{stream})
}

type KeyRPC_KeyBurstServer interface {
	SendAndClose(*Summary) error
	Recv() (*KeyPress, error)
	grpc.ServerStream
}

type keyRPCKeyBurstServer struct {
	grpc.ServerStream
}

func (x *keyRPCKeyBurstServer) SendAndClose(m *Summary) error {
	return x.ServerStream.SendMsg(m)
}

func (x *keyRPCKeyBurstServer) Recv() (*KeyPress, error) {
	m := new(KeyPress)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _KeyRPC_serviceDesc = grpc.ServiceDesc{
	ServiceName: "keyrpc.KeyRPC",
	HandlerType: (*KeyRPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "KeyRoute",
			Handler:       _KeyRPC_KeyRoute_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "KeyBurst",
			Handler:       _KeyRPC_KeyBurst_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "keyrpc.proto",
}
